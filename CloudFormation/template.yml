AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ImageURI:
    Type: String
    Description: URI de la imagen de contenedor en ECR

Resources:

  # Create an ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyECSCluster

  # IAM Role para que las tareas puedan ejecutarse
  FargateTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  # Create a TaskDefinition with container details
  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt FargateTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: my-container
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # Create an LogGroup for CloudWatch-Logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: log_group_myecscluster
      RetentionInDays: 7

  # Security Group para permitir trafico HTTP
  ECSFargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Permitir trafico HTTP al contenedor"
      VpcId: vpc-0a71831e5956ecce3
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Permitir trafico HTTP al ALB"
      VpcId: vpc-0a71831e5956ecce3
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - subnet-0c550b8bf5fe1270e
        - subnet-0637fb91da844886c
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0a71831e5956ecce3
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Servicio ECS para ejecutar el Task Definition en el Cluster
  ECSFargateService:
    Type: AWS::ECS::Service
    DependsOn:
      - HTTPListener
      - ApplicationLoadBalancer
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref FargateTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-0c550b8bf5fe1270e
            - subnet-0637fb91da844886c
          SecurityGroups:
            - !Ref ECSFargateSecurityGroup
      LoadBalancers:
        - ContainerName: my-container
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerDNSName:
    Description: "La URL p√∫blica del ALB"
    Value: !GetAtt ApplicationLoadBalancer.DNSName

